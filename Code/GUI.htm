<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>音频和弦时间轴可视化工具</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            color: white;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 30px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(4px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }
        
        .subtitle {
            font-size: 1.3rem;
            opacity: 0.9;
            margin-bottom: 20px;
            color: #a0d2eb;
        }
        
        .stats-bar {
            display: flex;
            justify-content: space-around;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            font-size: 1.1rem;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-value {
            font-weight: bold;
            color: #ffd166;
            font-size: 1.3rem;
        }
        
        .upload-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            margin-bottom: 30px;
            padding: 25px;
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px;
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.2);
        }
        
        .file-input {
            display: none;
        }
        
        .file-label {
            display: inline-block;
            padding: 14px 35px;
            background: linear-gradient(45deg, #2193b0, #6dd5ed);
            color: white;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
            font-size: 1.1rem;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }
        
        .file-label:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.35);
            background: linear-gradient(45deg, #1e88e5, #00b0ff);
        }
        
        .file-label:active {
            transform: translateY(2px);
        }
        
        .visualization-section {
            background: rgba(0, 0, 0, 0.4);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .section-title {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 20px;
            font-size: 1.8rem;
            color: #4ecdc4;
        }
        
        .section-title i {
            font-size: 1.5rem;
        }
        
        .timeline-container {
            position: relative;
            margin-top: 20px;
            overflow-x: auto;
            padding: 20px 0;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.3);
        }
        
        .timeline {
            display: flex;
            height: 140px;
            position: relative;
            min-width: 100%;
        }
        
        .chord-block {
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            cursor: pointer;
            transition: all 0.3s ease;
            border-right: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }
        
        .chord-block:hover {
            transform: scaleY(1.15);
            z-index: 10;
            box-shadow: inset 0 0 20px rgba(255, 255, 255, 0.3), 0 0 15px rgba(255, 255, 255, 0.4);
        }
        
        .chord-label {
            position: absolute;
            bottom: 8px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 1.1rem;
            font-weight: bold;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
            z-index: 2;
        }
        
        .chord-info {
            position: absolute;
            top: 8px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 0.85rem;
            opacity: 0.9;
            z-index: 2;
        }
        
        .time-scale {
            display: flex;
            height: 35px;
            position: relative;
            border-top: 2px solid rgba(255, 255, 255, 0.4);
            margin-top: 15px;
            background: rgba(0, 0, 0, 0.3);
        }
        
        .time-tick {
            position: absolute;
            top: 0;
            height: 12px;
            border-left: 2px solid rgba(255, 255, 255, 0.6);
        }
        
        .time-label {
            position: absolute;
            top: 14px;
            font-size: 0.85rem;
            transform: translateX(-50%);
            color: #ffd166;
        }
        
        .legend {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 30px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 12px;
            justify-content: center;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 15px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            transition: transform 0.2s ease;
        }
        
        .legend-item:hover {
            transform: translateY(-3px);
            background: rgba(255, 255, 255, 0.15);
        }
        
        .legend-color {
            width: 25px;
            height: 25px;
            border-radius: 5px;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px;
            padding: 30px;
            margin-top: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .instructions h2 {
            margin-bottom: 20px;
            color: #6dd5ed;
            font-size: 1.8rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .instructions ul {
            padding-left: 25px;
            margin-bottom: 25px;
        }
        
        .instructions li {
            margin-bottom: 15px;
            line-height: 1.6;
            font-size: 1.1rem;
        }
        
        .sample-data {
            margin-top: 20px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.25);
            border-radius: 12px;
            font-family: monospace;
            font-size: 1rem;
            overflow-x: auto;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .btn-group {
            display: flex;
            gap: 15px;
            margin-top: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            font-size: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-primary {
            background: linear-gradient(45deg, #FF6B6B, #FF8E53);
            color: white;
        }
        
        .btn-secondary {
            background: linear-gradient(45deg, #4ECDC4, #6dd5ed);
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }
        
        .btn:active {
            transform: translateY(1px);
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding: 25px;
            font-size: 1rem;
            opacity: 0.8;
            background: rgba(0, 0, 0, 0.25);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            margin-top: 15px;
            overflow: hidden;
            display: none;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #FF6B6B, #FF8E53);
            width: 0%;
            transition: width 0.5s ease;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .timeline {
                height: 100px;
            }
            
            .section-title {
                font-size: 1.5rem;
            }
            
            .btn {
                padding: 10px 18px;
                font-size: 0.9rem;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-wave-square"></i> 音频和弦时间轴可视化工具</h1>
            <p class="subtitle">智能分析和弦序列，可视化展示音频帧中的和弦变化</p>
            
            <div class="stats-bar">
                <div class="stat-item">
                    <div>和弦识别</div>
                    <div class="stat-value">等待加载数据</div>
                </div>
            </div>
        </header>
        
        <div class="upload-section">
            <input type="file" id="csvFile" class="file-input" accept=".csv">
            <label for="csvFile" class="file-label">
                <i class="fas fa-file-upload"></i> 选择CSV文件
            </label>
            <p id="fileName">未选择文件</p>
            <div class="progress-bar" id="progressBar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
        </div>
        
        <div class="visualization-section">
            <h2 class="section-title">
                <i class="fas fa-sliders-h"></i> 和弦时间轴
            </h2>
            <div id="timelineContainer" class="timeline-container">
                <div id="timeline" class="timeline"></div>
                <div id="timeScale" class="time-scale"></div>
            </div>
            
            <div id="legend" class="legend"></div>
        </div>
        
        <div class="instructions">
            <h2><i class="fas fa-info-circle"></i> 使用说明</h2>
            <ul>
                <li>上传一个只包含一行数据的CSV文件，每个元素代表一个音频帧对应的和弦</li>
                <li>连续相同的和弦会自动合并，并在时间轴上显示为更宽的区块</li>
                <li>不同和弦使用不同颜色区分，鼠标悬停可查看详细信息</li>
                <li>时间轴下方显示时间刻度（秒）</li>
            </ul>
        </div>
        
        <footer>
            <p>2025 信号分析与处理 | 音频和弦可视化工具 | 周钰 翁超然 陈若涵 邹依轩</p>
        </footer>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const csvFileInput = document.getElementById('csvFile');
            const fileNameDisplay = document.getElementById('fileName');
            const timeline = document.getElementById('timeline');
            const timeScale = document.getElementById('timeScale');
            const legend = document.getElementById('legend');
            const loadSample1Btn = document.getElementById('loadSample1');
            const loadSample2Btn = document.getElementById('loadSample2');
            const progressBar = document.getElementById('progressBar');
            const progressFill = document.getElementById('progressFill');
            
            // 和弦到颜色的映射
            const chordColors = {};
            const colorPalette = [
                '#FF6B6B', '#4ECDC4', '#FFD166', '#118AB2', '#06D6A0',
                '#EF476F', '#FFC43D', '#1B9AAA', '#9B5DE5', '#F15BB5',
                '#00BBF9', '#00F5D4', '#FEE440', '#9B5DE5', '#00F5D4',
                '#FF7E5F', '#8A2BE2', '#20B2AA', '#FF6347', '#7B68EE'
            ];
            
            // 帧时长（毫秒）
            const frameDuration = 42.67;
            
            // 文件选择处理
            csvFileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    fileNameDisplay.textContent = `已选择: ${file.name}`;
                    showProgressBar();
                    setTimeout(() => {
                        processFile(file);
                        hideProgressBar();
                    }, 600);
                }
            });
            
            // 显示进度条
            function showProgressBar() {
                progressBar.style.display = 'block';
                progressFill.style.width = '0%';
                
                setTimeout(() => {
                    progressFill.style.width = '30%';
                }, 100);
                
                setTimeout(() => {
                    progressFill.style.width = '70%';
                }, 300);
                
                setTimeout(() => {
                    progressFill.style.width = '100%';
                }, 500);
            }
            
            // 隐藏进度条
            function hideProgressBar() {
                setTimeout(() => {
                    progressBar.style.display = 'none';
                }, 800);
            }
            
            // 加载示例数据1
            loadSample1Btn.addEventListener('click', function() {
                fileNameDisplay.textContent = "已加载: 示例数据1";
                const sampleData = "C,C,未知,C,Am,Am,G,G,未知,G,Em,Em,Dm,Dm,C,C,未知,未知,G,G,Dm,Dm,未知,Dm,Dm,G,G,C,C,Em,Em,Am,Am,F,F,Dm,Dm,G,G";
                showProgressBar();
                setTimeout(() => {
                    processCSVData(sampleData);
                    hideProgressBar();
                }, 600);
            });
            
            // 加载示例数据2
            loadSample2Btn.addEventListener('click', function() {
                fileNameDisplay.textContent = "已加载: 示例数据2";
                const sampleData = "F,未知,未知,G,Em,Am,未知,Dm,G,C,未知,Am,未知,F,未知,C,G,未知,Em,Am,Dm,未知,G,未知,C,Am,F,未知,Dm,G,未知";
                showProgressBar();
                setTimeout(() => {
                    processCSVData(sampleData);
                    hideProgressBar();
                }, 600);
            });
            
            // 处理上传的文件
            function processFile(file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    processCSVData(e.target.result);
                };
                reader.readAsText(file);
            }
            
            // 处理CSV数据
            function processCSVData(csvData) {
                // 清除之前的内容
                timeline.innerHTML = '';
                timeScale.innerHTML = '';
                legend.innerHTML = '';
                
                // 解析CSV数据（假设只有一行）
                let chords = csvData.split(',').map(chord => chord.trim());
                
                // 处理"未知"和弦
                chords = preprocessUnknownChords(chords);

                // 合并连续相同的和弦
                const mergedChords = mergeConsecutiveChords(chords);

                // 计算总时间
                const totalDuration = mergedChords.reduce((sum, chord) => sum + chord.duration, 0);
                
                // 更新统计信息
                updateStats(mergedChords.length, chords.length, totalDuration);
                
                // 生成和弦块
                createChordBlocks(mergedChords, totalDuration);
                
                // 生成时间刻度
                createTimeScale(totalDuration);
                
                // 生成图例
                createLegend();
            }
            
            // 预处理：处理"未知"和弦
            function preprocessUnknownChords(chords) {
                // 创建新数组以避免修改原始数组
                const processedChords = [...chords];
                
                for (let i = 0; i < processedChords.length; i++) {
                    if (processedChords[i] === "未知") {
                        if(i == 0)
                            processedChords[i] = processedChords[i+1];
                        else
                            processedChords[i] = processedChords[i-1];
                    }
                }
                return processedChords;
            }
            
            // 合并连续相同的和弦
            function mergeConsecutiveChords(chords) {
                const merged = [];
                let currentChord = chords[0];
                let count = 1;
                
                for (let i = 1; i < chords.length; i++) {
                    if (chords[i] === currentChord) {
                        count++;
                    } else {
                        merged.push({
                            chord: currentChord,
                            duration: count * frameDuration,
                            frames: count
                        });
                        
                        currentChord = chords[i];
                        count = 1;
                    }
                }
                
                // 添加最后一个和弦
                merged.push({
                    chord: currentChord,
                    duration: count * frameDuration,
                    frames: count
                });
                
                return merged;
            }
            
            // 更新统计信息
            function updateStats(mergedCount, totalFrames, totalDuration) {
                const statsBar = document.querySelector('.stats-bar');
                statsBar.innerHTML = `
                    <div class="stat-item">
                        <div>和弦区块</div>
                        <div class="stat-value">${mergedCount}</div>
                    </div>
                    <div class="stat-item">
                        <div>总帧数</div>
                        <div class="stat-value">${totalFrames}</div>
                    </div>
                `;
            }
            
            // 创建和弦块
            function createChordBlocks(chords, totalDuration) {
                chords.forEach(chordData => {
                    const chord = chordData.chord;
                    const duration = chordData.duration;
                    
                    // 计算和弦块的宽度（占总宽度的百分比）
                    const widthPercent = (duration / totalDuration) * 100;
                    
                    // 获取和弦颜色
                    const color = getChordColor(chord);
                    
                    // 创建和弦块元素
                    const block = document.createElement('div');
                    block.className = 'chord-block';
                    block.style.width = `${widthPercent}%`;
                    block.style.backgroundColor = color;
                    block.title = `和弦: ${chord}\n持续时间: ${duration.toFixed(2)}ms\n帧数: ${chordData.frames}`;
                    
                    // 添加和弦信息
                    const info = document.createElement('div');
                    info.className = 'chord-info';
                    info.textContent = `${chordData.frames}帧 (${duration.toFixed(0)}ms)`;
                    block.appendChild(info);
                    
                    // 添加和弦标签
                    const label = document.createElement('div');
                    label.className = 'chord-label';
                    label.textContent = chord;
                    block.appendChild(label);
                    
                    timeline.appendChild(block);
                });
            }
            
            // 获取和弦颜色
            function getChordColor(chord) {
                if (chord === "未知") {
                    return '#777777'; // 未知和弦使用灰色
                }
                
                if (!chordColors[chord]) {
                    // 为新的和弦分配颜色
                    const colorIndex = Object.keys(chordColors).length % colorPalette.length;
                    chordColors[chord] = colorPalette[colorIndex];
                }
                return chordColors[chord];
            }
            
            // 创建时间刻度
            function createTimeScale(totalDuration) {
                // 计算总秒数
                const totalSeconds = totalDuration / 1000;
                
                // 计算刻度间隔（每500毫秒一个刻度）
                const tickInterval = totalDuration / 10 ;
                const tickCount = Math.ceil(totalDuration / tickInterval);
                
                for (let i = 0; i <= tickCount; i++) {
                    const time = i * tickInterval;
                    const positionPercent = (time / totalDuration) * 100;
                    
                    // 创建刻度线
                    const tick = document.createElement('div');
                    tick.className = 'time-tick';
                    tick.style.left = `${positionPercent}%`;
                    
                    // 创建时间标签
                    const label = document.createElement('div');
                    label.className = 'time-label';
                    label.style.left = `${positionPercent}%`;
                    label.textContent = `${(time / 1000).toFixed(1)}s`;
                    
                    timeScale.appendChild(tick);
                    timeScale.appendChild(label);
                }
            }
            
            // 创建图例
            function createLegend() {
                // 收集所有不同的和弦（包括未知）
                const uniqueChords = [...new Set(Object.keys(chordColors).concat("未知"))];
                
                uniqueChords.forEach(chord => {
                    const item = document.createElement('div');
                    item.className = 'legend-item';
                    
                    const colorBox = document.createElement('div');
                    colorBox.className = 'legend-color';
                    colorBox.style.backgroundColor = getChordColor(chord);
                    
                    const label = document.createElement('span');
                    label.textContent = chord;
                    
                    item.appendChild(colorBox);
                    item.appendChild(label);
                    legend.appendChild(item);
                });
            }
        });
    </script>
</body>
</html>